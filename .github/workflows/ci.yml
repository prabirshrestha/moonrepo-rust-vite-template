name: ci

on:
  workflow_dispatch:
  pull_request:
      branches:
      - main
  push:
    branches:
      - main
      - ci/*
    tags:
      - 'v0.[0-9]+.[0-9]+'
      - 'v0.[0-9]+.[0-9]+-beta.[0-9]+'
      - 'v0.[0-9]+.[0-9]+-alpha.[0-9]+'

jobs:
  build:
    name: build
    strategy:
      fail-fast: true
      matrix:
        target:
            - x86_64-unknown-linux-gnu
            - x86_64-apple-darwin
            # - x86_64-pc-windows-msvc
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: objstor-x86_64-unknown-linux-gnu.tar.gz
          - target: x86_64-apple-darwin
            os: macos-latest
            name: objstor-x86_64-apple-darwin.tar.gz
          # - target: x86_64-pc-windows-msvc
          #   os: windows-latest
          #   name: objstor-x86_64-pc-windows-msvc.zip
    runs-on: ${{ matrix.os }}
    env:
      # emit backtraces on panics.
      rust_backtrace: 1
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: moonrepo/setup-rust@v1.0.3
        with:
          cache-target: release
          components: clippy
      - uses: moonrepo/setup-toolchain@v0.1.1
        with:
          auto-install: true
          moon-version: '1.17.2'    # renovate: datasource=github-releases depname=moonrepo/moon extractversion=^v(?<version>.*)$
          proto-version: '0.23.1'   # renovate: datasource=github-releases depname=moonrepo/proto extractversion=^v(?<version>.*)$
      - uses: swatinem/rust-cache@v2.7.0
      - uses: actions/cache@v3
        name: setup pnpm cache
        with:
          path: ${{ env.store_path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashfiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: apt-get update
        if: runner.os == 'linux'
        run : sudo apt-get update
      - uses: awalsh128/cache-apt-pkgs-action@latest
        if: runner.os == 'linux'
        with:
          packages: libclang-dev
          version: 1.0

      - run: moon --version
      - run: moon run :lint :build

      - name: prepare unix artifacts
        if: matrix.os != 'windows-latest'
        run: |
          tar czvf ${{ matrix.name }} -C ./target/release objstor

      - name: prepare windows artifacts
        if: matrix.os == 'windows-latest'
        run: |
          cd target/release
          strip objstor.exe
          7z a ../../../${{ matrix.name }} objstor.exe
          cd -

      - name: upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}
